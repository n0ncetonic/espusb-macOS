From 43c25145fe7e3ad0e4088f29bc9fc29b6076ecc2 Mon Sep 17 00:00:00 2001
From: Max Filippov <jcmvbkbc@gmail.com>
Date: Sun, 28 Sep 2014 22:52:01 +0400
Subject: [PATCH 03/29] WIP: xtensa: implement callee-saved register saving

Also fix frame pointer, correctly move stack pointer, and avoid movsp.

Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
---
 gcc/config/xtensa/xtensa-protos.h |   1 +
 gcc/config/xtensa/xtensa.c        | 241 +++++++++++++++++++++++++++++---------
 gcc/config/xtensa/xtensa.h        |  28 +++++
 gcc/config/xtensa/xtensa.md       |  57 ++++++---
 4 files changed, 252 insertions(+), 75 deletions(-)

diff --git a/gcc/config/xtensa/xtensa-protos.h b/gcc/config/xtensa/xtensa-protos.h
index 4be2ebe..303c441 100644
--- a/gcc/config/xtensa/xtensa-protos.h
+++ b/gcc/config/xtensa/xtensa-protos.h
@@ -68,6 +68,7 @@ extern void xtensa_setup_frame_addresses (void);
 extern int xtensa_dbx_register_number (int);
 extern long compute_frame_size (int);
 extern void xtensa_expand_prologue (void);
+extern void xtensa_expand_epilogue (void);
 extern void order_regs_for_local_alloc (void);
 
 #endif /* !__XTENSA_PROTOS_H__ */
diff --git a/gcc/config/xtensa/xtensa.c b/gcc/config/xtensa/xtensa.c
index 645644e..8778407 100644
--- a/gcc/config/xtensa/xtensa.c
+++ b/gcc/config/xtensa/xtensa.c
@@ -75,6 +75,8 @@ char xtensa_hard_regno_mode_ok[(int) MAX_MACHINE_MODE][FIRST_PSEUDO_REGISTER];
 
 /* Current frame size calculated by compute_frame_size.  */
 unsigned xtensa_current_frame_size;
+/* Callee-save area size in the current frame calculated by compute_frame_size. */
+int xtensa_callee_save_size;
 
 /* Largest block move to handle in-line.  */
 #define LARGEST_MOVE_RATIO 15
@@ -105,9 +107,9 @@ const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER] =
 const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =
 {
   RL_REGS,	SP_REG,		RL_REGS,	RL_REGS,
-  RL_REGS,	RL_REGS,	RL_REGS,	GR_REGS,
-  RL_REGS,	RL_REGS,	RL_REGS,	RL_REGS,
+  RL_REGS,	RL_REGS,	RL_REGS,	TARGET_WINDOWED_ABI ? GR_REGS : RL_REGS,
   RL_REGS,	RL_REGS,	RL_REGS,	RL_REGS,
+  RL_REGS,	RL_REGS,	RL_REGS,	TARGET_WINDOWED_ABI ? RL_REGS : GR_REGS,
   AR_REGS,	AR_REGS,	BR_REGS,
   FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
   FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
@@ -128,7 +130,6 @@ static rtx xtensa_legitimize_address (rtx, rtx, enum machine_mode);
 static bool xtensa_mode_dependent_address_p (const_rtx, addr_space_t);
 static bool xtensa_return_in_msb (const_tree);
 static void printx (FILE *, signed int);
-static void xtensa_function_epilogue (FILE *, HOST_WIDE_INT);
 static rtx xtensa_builtin_saveregs (void);
 static bool xtensa_legitimate_address_p (enum machine_mode, rtx, bool);
 static unsigned int xtensa_multibss_section_type_flags (tree, const char *,
@@ -181,14 +182,6 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =
   REG_ALLOC_ORDER;
 
 
-/* This macro generates the assembly code for function exit,
-   on machines that need it.  If FUNCTION_EPILOGUE is not defined
-   then individual return instructions are generated for each
-   return statement.  Args are same as for FUNCTION_PROLOGUE.  */
-
-#undef TARGET_ASM_FUNCTION_EPILOGUE
-#define TARGET_ASM_FUNCTION_EPILOGUE xtensa_function_epilogue
-
 /* These hooks specify assembly directives for creating certain kinds
    of integer object.  */
 
@@ -466,9 +459,10 @@ xtensa_valid_move (enum machine_mode mode, rtx *operands)
 
       /* The stack pointer can only be assigned with a MOVSP opcode.  */
       if (dst_regnum == STACK_POINTER_REGNUM)
-	return (mode == SImode
-		&& register_operand (operands[1], mode)
-		&& !ACC_REG_P (xt_true_regnum (operands[1])));
+	return !TARGET_WINDOWED_ABI
+	  || (mode == SImode
+	      && register_operand (operands[1], mode)
+	      && !ACC_REG_P (xt_true_regnum (operands[1])));
 
       if (!ACC_REG_P (dst_regnum))
 	return true;
@@ -1610,9 +1604,11 @@ xtensa_setup_frame_addresses (void)
   /* Set flag to cause TARGET_FRAME_POINTER_REQUIRED to return true.  */
   cfun->machine->accesses_prev_frame = 1;
 
+#if TARGET_WINDOWED_ABI
   emit_library_call
     (gen_rtx_SYMBOL_REF (Pmode, "__xtensa_libgcc_window_spill"),
      LCT_NORMAL, VOIDmode, 0);
+#endif
 }
 
 
@@ -2600,14 +2596,26 @@ xtensa_output_literal (FILE *file, rtx x, enum machine_mode mode, int labelno)
 long
 compute_frame_size (int size)
 {
+  int regno;
+
   /* Add space for the incoming static chain value.  */
   if (cfun->static_chain_decl != NULL)
     size += (1 * UNITS_PER_WORD);
 
+  xtensa_callee_save_size = 0;
+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)
+    {
+      if ((regno == A0_REG || (!fixed_regs[regno] && !call_used_regs[regno])) &&
+	  df_regs_ever_live_p (regno))
+	xtensa_callee_save_size += UNITS_PER_WORD;
+    }
+
   xtensa_current_frame_size =
     XTENSA_STACK_ALIGN (size
+			+ xtensa_callee_save_size
 			+ crtl->outgoing_args_size
 			+ (WINDOW_SIZE * UNITS_PER_WORD));
+  xtensa_callee_save_size = XTENSA_STACK_ALIGN (xtensa_callee_save_size);
   return xtensa_current_frame_size;
 }
 
@@ -2634,15 +2642,17 @@ xtensa_frame_pointer_required (void)
 void
 xtensa_expand_prologue (void)
 {
+  int regno;
   HOST_WIDE_INT total_size;
-  rtx size_rtx;
-  rtx insn, note_rtx;
+  HOST_WIDE_INT offset = 0;
+  rtx insn = NULL, note_rtx;
 
   total_size = compute_frame_size (get_frame_size ());
-  size_rtx = GEN_INT (total_size);
+
+#if TARGET_WINDOWED_ABI
 
   if (total_size < (1 << (12+3)))
-    insn = emit_insn (gen_entry (size_rtx));
+    insn = emit_insn (gen_entry (GEN_INT (total_size)));
   else
     {
       /* Use a8 as a temporary since a0-a7 may be live.  */
@@ -2652,6 +2662,52 @@ xtensa_expand_prologue (void)
       emit_insn (gen_subsi3 (tmp_reg, stack_pointer_rtx, tmp_reg));
       insn = emit_insn (gen_movsi (stack_pointer_rtx, tmp_reg));
     }
+#else
+  /* -128 is a limit of single addi instruction. */
+  if (total_size > 0 && total_size <= 128)
+    {
+      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
+				    GEN_INT (-total_size)));
+      offset = total_size - UNITS_PER_WORD;
+    }
+  else if (xtensa_callee_save_size)
+    {
+      /* 1020 is maximal s32i offset, if the frame is bigger than that
+       * we move sp to the end of callee-saved save area, save and then
+       * move it to its final location. */
+      if (total_size > 1024)
+        {
+	  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
+					GEN_INT (-xtensa_callee_save_size)));
+	  offset = xtensa_callee_save_size - UNITS_PER_WORD;
+	}
+      else
+        {
+	  rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);
+	  emit_move_insn (tmp_reg, GEN_INT (-total_size));
+	  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp_reg));
+	  offset = total_size - UNITS_PER_WORD;
+	}
+    }
+
+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)
+    {
+      if ((regno == A0_REG || (!fixed_regs[regno] && !call_used_regs[regno])) &&
+	  df_regs_ever_live_p (regno))
+        {
+	  rtx x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));
+
+	  offset -= UNITS_PER_WORD;
+	  emit_move_insn (gen_frame_mem (SImode, x), gen_rtx_REG (SImode, regno));
+	}
+    }
+  if (total_size > 1024)
+    {
+      rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);
+      emit_move_insn (tmp_reg, GEN_INT (xtensa_callee_save_size - total_size));
+      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp_reg));
+    }
+#endif
 
   if (frame_pointer_needed)
     {
@@ -2683,33 +2739,101 @@ xtensa_expand_prologue (void)
 				     stack_pointer_rtx));
     }
 
-  /* Create a note to describe the CFA.  Because this is only used to set
-     DW_AT_frame_base for debug info, don't bother tracking changes through
-     each instruction in the prologue.  It just takes up space.  */
-  note_rtx = gen_rtx_SET (VOIDmode, (frame_pointer_needed
-				     ? hard_frame_pointer_rtx
-				     : stack_pointer_rtx),
-			  plus_constant (Pmode, stack_pointer_rtx,
-					 -total_size));
-  RTX_FRAME_RELATED_P (insn) = 1;
-  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);
+  if (TARGET_WINDOWED_ABI || total_size > 0)
+    {
+      /* Create a note to describe the CFA.  Because this is only used to set
+	 DW_AT_frame_base for debug info, don't bother tracking changes through
+	 each instruction in the prologue.  It just takes up space.  */
+      note_rtx = gen_rtx_SET (VOIDmode, (frame_pointer_needed
+					 ? hard_frame_pointer_rtx
+					 : stack_pointer_rtx),
+			      plus_constant (Pmode, stack_pointer_rtx,
+					     -total_size));
+      RTX_FRAME_RELATED_P (insn) = 1;
+      add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);
+    }
 }
 
-
-/* Clear variables at function end.  */
-
 void
-xtensa_function_epilogue (FILE *file ATTRIBUTE_UNUSED,
-			  HOST_WIDE_INT size ATTRIBUTE_UNUSED)
+xtensa_expand_epilogue (void)
 {
+#if !TARGET_WINDOWED_ABI
+  int regno;
+  rtx insn;
+  HOST_WIDE_INT offset;
+
+  if (xtensa_current_frame_size > (frame_pointer_needed ? 127 : 1024))
+    {
+      rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);
+      emit_move_insn (tmp_reg, GEN_INT (xtensa_current_frame_size -
+					xtensa_callee_save_size));
+      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, frame_pointer_needed ?
+				    hard_frame_pointer_rtx : stack_pointer_rtx, tmp_reg));
+      offset = xtensa_callee_save_size - UNITS_PER_WORD;
+    }
+  else
+    {
+      if (frame_pointer_needed)
+	emit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);
+      offset = xtensa_current_frame_size - UNITS_PER_WORD;
+    }
+
+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)
+    {
+      if ((regno == A0_REG || (!fixed_regs[regno] && !call_used_regs[regno])) &&
+	  df_regs_ever_live_p (regno))
+        {
+	  rtx x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));
+
+	  offset -= UNITS_PER_WORD;
+	  emit_move_insn (gen_rtx_REG (SImode, regno), gen_frame_mem (SImode, x));
+	}
+    }
+
+  if (xtensa_current_frame_size > 0)
+    {
+      rtx note_rtx;
+
+      if (frame_pointer_needed || /* always reachable with addi */
+	  xtensa_current_frame_size > 1024 ||
+	  xtensa_current_frame_size <= 127)
+	{
+	  if (xtensa_current_frame_size <= 127)
+	    offset = xtensa_current_frame_size;
+	  else
+	    offset = xtensa_callee_save_size;
+
+	  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
+					GEN_INT (offset)));
+	}
+      else
+	{
+	  rtx tmp_reg = gen_rtx_REG (Pmode, A9_REG);
+	  emit_move_insn (tmp_reg, GEN_INT (xtensa_current_frame_size));
+	  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp_reg));
+	}
+
+      /* Create a note to describe the CFA.  Because this is only used to set
+	 DW_AT_frame_base for debug info, don't bother tracking changes through
+	 each instruction in the prologue.  It just takes up space.  */
+      note_rtx = gen_rtx_SET (VOIDmode, stack_pointer_rtx,
+			      plus_constant (Pmode, frame_pointer_needed
+					     ? hard_frame_pointer_rtx
+					     : stack_pointer_rtx,
+					     xtensa_current_frame_size));
+      RTX_FRAME_RELATED_P (insn) = 1;
+      add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);
+    }
+#endif
   xtensa_current_frame_size = 0;
+  xtensa_callee_save_size = 0;
+  emit_jump_insn (gen_return ());
 }
 
-
 rtx
 xtensa_return_addr (int count, rtx frame)
 {
-  rtx result, retaddr, curaddr, label;
+  rtx retaddr;
 
   if (count == -1)
     retaddr = gen_rtx_REG (Pmode, A0_REG);
@@ -2722,28 +2846,31 @@ xtensa_return_addr (int count, rtx frame)
     }
 
 #if TARGET_WINDOWED_ABI
-  /* The 2 most-significant bits of the return address on Xtensa hold
-     the register window size.  To get the real return address, these
-     bits must be replaced with the high bits from some address in the
-     code.  */
-
-  /* Get the 2 high bits of a local label in the code.  */
-  curaddr = gen_reg_rtx (Pmode);
-  label = gen_label_rtx ();
-  emit_label (label);
-  LABEL_PRESERVE_P (label) = 1;
-  emit_move_insn (curaddr, gen_rtx_LABEL_REF (Pmode, label));
-  emit_insn (gen_lshrsi3 (curaddr, curaddr, GEN_INT (30)));
-  emit_insn (gen_ashlsi3 (curaddr, curaddr, GEN_INT (30)));
-
-  /* Clear the 2 high bits of the return address.  */
-  result = gen_reg_rtx (Pmode);
-  emit_insn (gen_ashlsi3 (result, retaddr, GEN_INT (2)));
-  emit_insn (gen_lshrsi3 (result, result, GEN_INT (2)));
-
-  /* Combine them to get the result.  */
-  emit_insn (gen_iorsi3 (result, result, curaddr));
-  return result;
+  {
+    rtx result, curaddr, label;
+    /* The 2 most-significant bits of the return address on Xtensa hold
+       the register window size.  To get the real return address, these
+       bits must be replaced with the high bits from some address in the
+       code.  */
+
+    /* Get the 2 high bits of a local label in the code.  */
+    curaddr = gen_reg_rtx (Pmode);
+    label = gen_label_rtx ();
+    emit_label (label);
+    LABEL_PRESERVE_P (label) = 1;
+    emit_move_insn (curaddr, gen_rtx_LABEL_REF (Pmode, label));
+    emit_insn (gen_lshrsi3 (curaddr, curaddr, GEN_INT (30)));
+    emit_insn (gen_ashlsi3 (curaddr, curaddr, GEN_INT (30)));
+
+    /* Clear the 2 high bits of the return address.  */
+    result = gen_reg_rtx (Pmode);
+    emit_insn (gen_ashlsi3 (result, retaddr, GEN_INT (2)));
+    emit_insn (gen_lshrsi3 (result, result, GEN_INT (2)));
+
+    /* Combine them to get the result.  */
+    emit_insn (gen_iorsi3 (result, result, curaddr));
+    return result;
+  }
 #else
   return retaddr;
 #endif
diff --git a/gcc/config/xtensa/xtensa.h b/gcc/config/xtensa/xtensa.h
index 75fedda..dd315a8 100644
--- a/gcc/config/xtensa/xtensa.h
+++ b/gcc/config/xtensa/xtensa.h
@@ -267,6 +267,7 @@ extern unsigned xtensa_current_frame_size;
    argument registers are not used until after other register choices
    have been exhausted.  */
 
+#if TARGET_WINDOWED_ABI
 #define REG_ALLOC_ORDER \
 {  8,  9, 10, 11, 12, 13, 14, 15,  7,  6,  5,  4,  3,  2, \
   18, \
@@ -274,6 +275,16 @@ extern unsigned xtensa_current_frame_size;
    0,  1, 16, 17, \
   35, \
 }
+#else
+#define REG_ALLOC_ORDER \
+{  8,  9, 10, 11,  7,  6,  5,  4,  3,  2, 12, 13, 14, 15, \
+  18, \
+  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, \
+   0,  1, 16, 17, \
+  35, \
+}
+#endif
+
 
 #define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()
 
@@ -430,6 +441,7 @@ enum reg_class
 /* Contents of the register classes.  The Nth integer specifies the
    contents of class N.  The way the integer MASK is interpreted is
    that register R is in the class if 'MASK & (1 << R)' is 1.  */
+#if TARGET_WINDOWED_ABI
 #define REG_CLASS_CONTENTS \
 { \
   { 0x00000000, 0x00000000 }, /* no registers */ \
@@ -442,6 +454,20 @@ enum reg_class
   { 0x0003ffff, 0x00000000 }, /* integer registers */ \
   { 0xffffffff, 0x0000000f }  /* all registers */ \
 }
+#else
+#define REG_CLASS_CONTENTS \
+{ \
+  { 0x00000000, 0x00000000 }, /* no registers */ \
+  { 0x00040000, 0x00000000 }, /* coprocessor boolean registers */ \
+  { 0xfff80000, 0x00000007 }, /* floating-point registers */ \
+  { 0x00000000, 0x00000008 }, /* MAC16 accumulator */ \
+  { 0x00000002, 0x00000000 }, /* stack pointer register */ \
+  { 0x00007ffd, 0x00000000 }, /* preferred reload registers */ \
+  { 0x0000fffd, 0x00000000 }, /* general-purpose registers */ \
+  { 0x0003ffff, 0x00000000 }, /* integer registers */ \
+  { 0xffffffff, 0x0000000f }  /* all registers */ \
+}
+#endif
 
 /* A C expression whose value is a register class containing hard
    register REGNO.  In general there is more that one such class;
@@ -649,7 +675,9 @@ typedef struct xtensa_args
 
 /* Define this if the return address of a particular stack frame is
    accessed from the frame pointer of the previous stack frame.  */
+#if TARGET_WINDOWED_ABI
 #define RETURN_ADDR_IN_PREVIOUS_FRAME
+#endif
 
 /* A C expression whose value is RTL representing the value of the
    return address for the frame COUNT steps up from the current
diff --git a/gcc/config/xtensa/xtensa.md b/gcc/config/xtensa/xtensa.md
index 4b308c4..a60bbda 100644
--- a/gcc/config/xtensa/xtensa.md
+++ b/gcc/config/xtensa/xtensa.md
@@ -24,6 +24,7 @@
   (A1_REG		1)
   (A7_REG		7)
   (A8_REG		8)
+  (A9_REG		9)
 
   (UNSPEC_NOP		2)
   (UNSPEC_PLT		3)
@@ -91,6 +92,15 @@
 
 (define_attr "length" "" (const_int 1))
 
+(define_attr "abi" "windowed,call0" (const_string "windowed"))
+
+(define_attr "enabled" ""
+ (cond [(eq_attr "abi" "windowed") (const_int 1)
+  (and (eq_attr "abi" "call0")
+   (ne (symbol_ref "TARGET_WINDOWED_ABI") (const_int 1)))
+  (const_int 1)]
+  (const_int 0))
+ )
 ;; Describe a user's asm statement.
 (define_asm_attributes
   [(set_attr "type" "multi")])
@@ -141,19 +151,25 @@
 ;; Addition.
 
 (define_insn "addsi3"
-  [(set (match_operand:SI 0 "register_operand" "=D,D,a,a,a")
-	(plus:SI (match_operand:SI 1 "register_operand" "%d,d,r,r,r")
-		 (match_operand:SI 2 "add_operand" "d,O,r,J,N")))]
+  [(set (match_operand:SI 0 "register_operand" "=D,D,r,r,r,q,q,q,q,q")
+	(plus:SI (match_operand:SI 1 "register_operand" "%d,d,r,r,r,d,d,r,r,r")
+		 (match_operand:SI 2 "add_operand" "d,O,r,J,N,d,O,r,J,N")))]
   ""
   "@
    add.n\t%0, %1, %2
    addi.n\t%0, %1, %d2
    add\t%0, %1, %2
    addi\t%0, %1, %d2
+   addmi\t%0, %1, %x2
+   add.n\t%0, %1, %2
+   addi.n\t%0, %1, %d2
+   add\t%0, %1, %2
+   addi\t%0, %1, %d2
    addmi\t%0, %1, %x2"
-  [(set_attr "type"	"arith,arith,arith,arith,arith")
+  [(set_attr "type"	"arith,arith,arith,arith,arith,arith,arith,arith,arith,arith")
    (set_attr "mode"	"SI")
-   (set_attr "length"	"2,2,3,3,3")])
+   (set_attr "length"	"2,2,3,3,3,2,2,3,3,3")
+   (set_attr "abi"	"*,*,*,*,*,call0,call0,call0,call0,call0")])
 
 (define_insn "*addx"
   [(set (match_operand:SI 0 "register_operand" "=a")
@@ -799,8 +815,8 @@
 })
 
 (define_insn "movsi_internal"
-  [(set (match_operand:SI 0 "nonimmed_operand" "=D,D,D,D,R,R,a,q,a,W,a,a,U,*a,*A")
-	(match_operand:SI 1 "move_operand" "M,D,d,R,D,d,r,r,I,i,T,U,r,*A,*r"))]
+  [(set (match_operand:SI 0 "nonimmed_operand" "=D,D,D,D,R,R,a,q,q,a,W,a,a,U,*a,*A")
+	(match_operand:SI 1 "move_operand" "M,D,d,R,D,d,r,r,r,I,i,T,U,r,*A,*r"))]
   "xtensa_valid_move (SImode, operands)"
   "@
    movi.n\t%0, %x1
@@ -810,6 +826,7 @@
    %v0s32i.n\t%1, %0
    %v0s32i.n\t%1, %0
    mov\t%0, %1
+   mov\t%0, %1
    movsp\t%0, %1
    movi\t%0, %x1
    const16\t%0, %t1\;const16\t%0, %b1
@@ -818,9 +835,9 @@
    %v0s32i\t%1, %0
    rsr\t%0, ACCLO
    wsr\t%1, ACCLO"
-  [(set_attr "type" "move,move,move,load,store,store,move,move,move,move,load,load,store,rsr,wsr")
+  [(set_attr "type" "move,move,move,load,store,store,move,move,move,move,move,load,load,store,rsr,wsr")
    (set_attr "mode"	"SI")
-   (set_attr "length"	"2,2,2,2,2,2,3,3,3,6,3,3,3,3,3")])
+   (set_attr "length"	"2,2,2,2,2,2,3,3,3,3,6,3,3,3,3,3")])
 
 ;; 16-bit Integer moves
 
@@ -1525,8 +1542,9 @@
   "")
 
 (define_expand "call"
-  [(call (match_operand 0 "memory_operand" "")
-	 (match_operand 1 "" ""))]
+  [(parallel [(call (match_operand 0 "memory_operand" "")
+	            (match_operand 1 "" ""))
+              (clobber (reg:SI A0_REG))])]
   ""
 {
   rtx addr = XEXP (operands[0], 0);
@@ -1539,7 +1557,8 @@
 
 (define_insn "call_internal"
   [(call (mem (match_operand:SI 0 "call_insn_operand" "nir"))
-	 (match_operand 1 "" "i"))]
+	 (match_operand 1 "" "i"))
+   (clobber (reg:SI A0_REG))]
   ""
 {
   return xtensa_emit_call (0, operands);
@@ -1549,9 +1568,10 @@
    (set_attr "length"	"3")])
 
 (define_expand "call_value"
-  [(set (match_operand 0 "register_operand" "")
-	(call (match_operand 1 "memory_operand" "")
-	      (match_operand 2 "" "")))]
+  [(parallel [(set (match_operand 0 "register_operand" "")
+	           (call (match_operand 1 "memory_operand" "")
+		         (match_operand 2 "" "")))
+              (clobber (reg:SI A0_REG))])]
   ""
 {
   rtx addr = XEXP (operands[1], 0);
@@ -1565,7 +1585,8 @@
 (define_insn "call_value_internal"
   [(set (match_operand 0 "register_operand" "=a")
         (call (mem (match_operand:SI 1 "call_insn_operand" "nir"))
-              (match_operand 2 "" "i")))]
+              (match_operand 2 "" "i")))
+   (clobber (reg:SI A0_REG))]
   ""
 {
   return xtensa_emit_call (1, operands);
@@ -1589,7 +1610,7 @@
 (define_insn "return"
   [(return)
    (use (reg:SI A0_REG))]
-  "reload_completed"
+  "(TARGET_WINDOWED_ABI || !xtensa_current_frame_size) && reload_completed"
 {
   return TARGET_WINDOWED_ABI ?
       (TARGET_DENSITY ? "retw.n" : "retw") :
@@ -1614,7 +1635,7 @@
   [(return)]
   ""
 {
-  emit_jump_insn (gen_return ());
+  xtensa_expand_epilogue ();
   DONE;
 })
 
-- 
2.1.4


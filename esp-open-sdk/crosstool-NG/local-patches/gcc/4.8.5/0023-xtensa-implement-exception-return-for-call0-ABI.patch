From 36448dfb30a64978d9d13398af6b9924e7d63b2e Mon Sep 17 00:00:00 2001
From: Max Filippov <jcmvbkbc@gmail.com>
Date: Mon, 12 Jan 2015 15:21:31 +0300
Subject: [PATCH 23/29] xtensa: implement exception return for call0 ABI

Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
---
 gcc/config/xtensa/xtensa-protos.h |  1 +
 gcc/config/xtensa/xtensa.c        | 40 ++++++++++++++++++++++++++++++++++++++-
 gcc/config/xtensa/xtensa.h        |  2 ++
 gcc/config/xtensa/xtensa.md       | 37 +++++++++++++++++++++++++++++++++++-
 4 files changed, 78 insertions(+), 2 deletions(-)

diff --git a/gcc/config/xtensa/xtensa-protos.h b/gcc/config/xtensa/xtensa-protos.h
index 5cc97fe..056d333 100644
--- a/gcc/config/xtensa/xtensa-protos.h
+++ b/gcc/config/xtensa/xtensa-protos.h
@@ -61,6 +61,7 @@ extern void init_cumulative_args (CUMULATIVE_ARGS *, int);
 extern void print_operand (FILE *, rtx, int);
 extern void print_operand_address (FILE *, rtx);
 extern void xtensa_output_literal (FILE *, rtx, enum machine_mode, int);
+extern void xtensa_set_return_address (rtx, rtx);
 extern rtx xtensa_return_addr (int, rtx);
 #endif /* RTX_CODE */
 
diff --git a/gcc/config/xtensa/xtensa.c b/gcc/config/xtensa/xtensa.c
index f806329..5ad1ae8 100644
--- a/gcc/config/xtensa/xtensa.c
+++ b/gcc/config/xtensa/xtensa.c
@@ -2580,7 +2580,11 @@ xtensa_call_save_reg(int regno)
     return false;
 
   if (regno == A0_REG)
-    return crtl->profile || !crtl->is_leaf || df_regs_ever_live_p (regno);
+    return crtl->profile || !crtl->is_leaf || crtl->calls_eh_return ||
+      df_regs_ever_live_p (regno);
+
+  if (crtl->calls_eh_return && regno >= 2 && regno < 4)
+    return true;
 
   return !fixed_regs[regno] && !call_used_regs[regno] &&
     df_regs_ever_live_p (regno);
@@ -2811,6 +2815,11 @@ xtensa_expand_epilogue (void)
 	  offset = xtensa_current_frame_size - UNITS_PER_WORD;
 	}
 
+      /* Prevent reordering of saved a0 update and loading it back from
+	 the save area.  */
+      if (crtl->calls_eh_return)
+	emit_insn (gen_blockage ());
+
       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; ++regno)
 	{
 	  if (xtensa_call_save_reg(regno))
@@ -2845,12 +2854,41 @@ xtensa_expand_epilogue (void)
 	      emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp_reg));
 	    }
 	}
+
+      if (crtl->calls_eh_return)
+	emit_insn (gen_add3_insn (stack_pointer_rtx,
+				  stack_pointer_rtx,
+				  EH_RETURN_STACKADJ_RTX));
     }
   xtensa_current_frame_size = 0;
   xtensa_callee_save_size = 0;
   emit_jump_insn (gen_return ());
 }
 
+void
+xtensa_set_return_address (rtx address, rtx scratch)
+{
+  HOST_WIDE_INT total_size = compute_frame_size (get_frame_size ());
+  rtx frame = frame_pointer_needed ?
+    hard_frame_pointer_rtx : stack_pointer_rtx;
+  rtx a0_addr = plus_constant (Pmode, frame,
+			       total_size - UNITS_PER_WORD);
+  rtx note = gen_rtx_SET (VOIDmode,
+			  gen_frame_mem (SImode, a0_addr),
+			  gen_rtx_REG (SImode, A0_REG));
+  rtx insn;
+
+  if (total_size > 1024) {
+    emit_move_insn (scratch, GEN_INT (total_size - UNITS_PER_WORD));
+    emit_insn (gen_addsi3 (scratch, frame, scratch));
+    a0_addr = scratch;
+  }
+
+  insn = emit_move_insn (gen_frame_mem (SImode, a0_addr), address);
+  RTX_FRAME_RELATED_P (insn) = 1;
+  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note);
+}
+
 rtx
 xtensa_return_addr (int count, rtx frame)
 {
diff --git a/gcc/config/xtensa/xtensa.h b/gcc/config/xtensa/xtensa.h
index c36a6a6..73c2f1c 100644
--- a/gcc/config/xtensa/xtensa.h
+++ b/gcc/config/xtensa/xtensa.h
@@ -815,6 +815,8 @@ typedef struct xtensa_args
       | DW_EH_PE_pcrel | DW_EH_PE_sdata4)				\
    : DW_EH_PE_absptr)
 
+#define EH_RETURN_STACKADJ_RTX gen_rtx_REG (Pmode, GP_REG_FIRST + 10)
+
 /* Emit a PC-relative relocation.  */
 #define ASM_OUTPUT_DWARF_PCREL(FILE, SIZE, LABEL)			\
   do {									\
diff --git a/gcc/config/xtensa/xtensa.md b/gcc/config/xtensa/xtensa.md
index e377df0..5303a59 100644
--- a/gcc/config/xtensa/xtensa.md
+++ b/gcc/config/xtensa/xtensa.md
@@ -43,6 +43,7 @@
   (UNSPECV_S32C1I	5)
   (UNSPECV_EH_RETURN	6)
   (UNSPECV_SET_TP	7)
+  (UNSPECV_BLOCKAGE	8)
 ])
 
 ;; This code iterator allows signed and unsigned widening multiplications
@@ -1645,7 +1646,18 @@
 ;; already been applied to the handler, but the generic version doesn't
 ;; allow us to frob it quite enough, so we just frob here.
 
-(define_insn_and_split "eh_return"
+(define_expand "eh_return"
+  [(use (match_operand 0 "general_operand"))]
+  ""
+{
+  if (TARGET_WINDOWED_ABI)
+    emit_insn (gen_eh_set_a0_windowed (operands[0]));
+  else
+    emit_insn (gen_eh_set_a0_call0 (operands[0]));
+  DONE;
+})
+
+(define_insn_and_split "eh_set_a0_windowed"
   [(set (reg:SI A0_REG)
 	(unspec_volatile:SI [(match_operand:SI 0 "register_operand" "r")]
 			    UNSPECV_EH_RETURN))
@@ -1658,6 +1670,29 @@
    (set (reg:SI A0_REG) (rotatert:SI (match_dup 1) (const_int 2)))]
   "")
 
+(define_insn_and_split "eh_set_a0_call0"
+  [(unspec_volatile [(match_operand:SI 0 "register_operand" "r")]
+		    UNSPECV_EH_RETURN)
+   (clobber (match_scratch:SI 1 "=r"))]
+  ""
+  "#"
+  "reload_completed"
+  [(const_int 0)]
+{
+  xtensa_set_return_address (operands[0], operands[1]);
+  DONE;
+})
+
+;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and
+;; all of memory.  This blocks insns from being moved across this point.
+
+(define_insn "blockage"
+  [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)]
+  ""
+  ""
+  [(set_attr "length" "0")
+   (set_attr "type" "nop")])
+
 ;; Setting up a frame pointer is tricky for Xtensa because GCC doesn't
 ;; know if a frame pointer is required until the reload pass, and
 ;; because there may be an incoming argument value in the hard frame
-- 
2.1.4


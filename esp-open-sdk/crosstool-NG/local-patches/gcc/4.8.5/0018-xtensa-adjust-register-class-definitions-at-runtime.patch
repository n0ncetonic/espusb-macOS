From 16ac738a172afaeddeda6e84415363120ba1d635 Mon Sep 17 00:00:00 2001
From: Max Filippov <jcmvbkbc@gmail.com>
Date: Sun, 28 Dec 2014 07:07:49 +0300
Subject: [PATCH 18/29] xtensa: adjust register class definitions at runtime

Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
---
 gcc/config/xtensa/xtensa-protos.h |  1 +
 gcc/config/xtensa/xtensa.c        | 82 ++++++++++++++++++++++++++++++---------
 gcc/config/xtensa/xtensa.h        | 72 ++++++++++------------------------
 3 files changed, 85 insertions(+), 70 deletions(-)

diff --git a/gcc/config/xtensa/xtensa-protos.h b/gcc/config/xtensa/xtensa-protos.h
index 303c441..5cc97fe 100644
--- a/gcc/config/xtensa/xtensa-protos.h
+++ b/gcc/config/xtensa/xtensa-protos.h
@@ -70,5 +70,6 @@ extern long compute_frame_size (int);
 extern void xtensa_expand_prologue (void);
 extern void xtensa_expand_epilogue (void);
 extern void order_regs_for_local_alloc (void);
+extern enum reg_class xtensa_regno_to_class (int regno);
 
 #endif /* !__XTENSA_PROTOS_H__ */
diff --git a/gcc/config/xtensa/xtensa.c b/gcc/config/xtensa/xtensa.c
index e2ab20e..a25a899 100644
--- a/gcc/config/xtensa/xtensa.c
+++ b/gcc/config/xtensa/xtensa.c
@@ -103,21 +103,6 @@ const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER] =
   1
 };
 
-/* Map hard register number to register class */
-const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER] =
-{
-  RL_REGS,	SP_REG,		RL_REGS,	RL_REGS,
-  RL_REGS,	RL_REGS,	RL_REGS,	TARGET_WINDOWED_ABI ? GR_REGS : RL_REGS,
-  RL_REGS,	RL_REGS,	RL_REGS,	RL_REGS,
-  RL_REGS,	RL_REGS,	RL_REGS,	TARGET_WINDOWED_ABI ? RL_REGS : GR_REGS,
-  AR_REGS,	AR_REGS,	BR_REGS,
-  FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
-  FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
-  FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
-  FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
-  ACC_REG,
-};
-
 static void xtensa_option_override (void);
 static enum internal_test map_test_to_internal_test (enum rtx_code);
 static rtx gen_int_relational (enum rtx_code, rtx, rtx, int *);
@@ -178,8 +163,8 @@ static bool xtensa_legitimate_constant_p (enum machine_mode, rtx);
 static bool xtensa_member_type_forces_blk (const_tree,
 					   enum machine_mode mode);
 
-static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =
-  REG_ALLOC_ORDER;
+static void xtensa_conditional_register_usage (void);
+
 
 
 /* These hooks specify assembly directives for creating certain kinds
@@ -292,6 +277,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =
 #undef TARGET_LEGITIMATE_CONSTANT_P
 #define TARGET_LEGITIMATE_CONSTANT_P xtensa_legitimate_constant_p
 
+#undef TARGET_CONDITIONAL_REGISTER_USAGE
+#define TARGET_CONDITIONAL_REGISTER_USAGE xtensa_conditional_register_usage
+
 struct gcc_target targetm = TARGET_INITIALIZER;
 
 
@@ -3361,7 +3349,19 @@ order_regs_for_local_alloc (void)
 {
   if (!leaf_function_p ())
     {
-      memcpy (reg_alloc_order, reg_nonleaf_alloc_order,
+      static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =
+	REG_ALLOC_ORDER;
+      static const int reg_nonleaf_alloc_order_call0[FIRST_PSEUDO_REGISTER] =
+	{
+	  11, 10,  9,  8,  7,  6,  5,  4,  3,  2, 12, 13, 14, 15,
+	  18,
+	  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
+	  0,  1, 16, 17,
+	  35,
+	};
+
+      memcpy (reg_alloc_order, TARGET_WINDOWED_ABI ?
+	      reg_nonleaf_alloc_order : reg_nonleaf_alloc_order_call0,
 	      FIRST_PSEUDO_REGISTER * sizeof (int));
     }
   else
@@ -3898,4 +3898,50 @@ xtensa_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)
   return !xtensa_tls_referenced_p (x);
 }
 
+/* Update register usage after having seen the compiler flags.  */
+
+static void
+xtensa_conditional_register_usage (void)
+{
+  unsigned i, c_mask;
+
+  c_mask = TARGET_WINDOWED_ABI ? (1 << 1) : (1 << 2);
+
+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)
+    {
+      /* Set/reset conditionally defined registers from
+	 CALL_USED_REGISTERS initializer.  */
+      if (call_used_regs[i] > 1)
+	call_used_regs[i] = !!(call_used_regs[i] & c_mask);
+    }
+
+  /* Remove hard FP register from the preferred reload registers set.  */
+  CLEAR_HARD_REG_BIT (reg_class_contents[(int)RL_REGS],
+		      HARD_FRAME_POINTER_REGNUM);
+}
+
+/* Map hard register number to register class */
+
+enum reg_class xtensa_regno_to_class (int regno)
+{
+  static const enum reg_class regno_to_class[FIRST_PSEUDO_REGISTER] =
+    {
+      RL_REGS,	SP_REG,		RL_REGS,	RL_REGS,
+      RL_REGS,	RL_REGS,	RL_REGS,	RL_REGS,
+      RL_REGS,	RL_REGS,	RL_REGS,	RL_REGS,
+      RL_REGS,	RL_REGS,	RL_REGS,	RL_REGS,
+      AR_REGS,	AR_REGS,	BR_REGS,
+      FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
+      FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
+      FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
+      FP_REGS,	FP_REGS,	FP_REGS,	FP_REGS,
+      ACC_REG,
+    };
+
+  if (regno == HARD_FRAME_POINTER_REGNUM)
+    return GR_REGS;
+  else
+    return regno_to_class[regno];
+}
+
 #include "gt-xtensa.h"
diff --git a/gcc/config/xtensa/xtensa.h b/gcc/config/xtensa/xtensa.h
index 1670f8c..7c6eacc 100644
--- a/gcc/config/xtensa/xtensa.h
+++ b/gcc/config/xtensa/xtensa.h
@@ -234,24 +234,22 @@ extern unsigned xtensa_current_frame_size;
    registers that can be used without being saved.
    The latter must include the registers where values are returned
    and the register where structure-value addresses are passed.
-   Aside from that, you can include as many other registers as you like.  */
-#if TARGET_WINDOWED_ABI
-#define CALL_USED_REGISTERS						\
-{									\
-  1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,			\
-  1, 1, 1,								\
-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,			\
-  1,									\
-}
-#else
+   Aside from that, you can include as many other registers as you like.
+
+   The value encoding is the following:
+   1: register is used by all ABIs;
+   bit 1 is set: register is used by windowed ABI;
+   bit 2 is set: register is used by call0 ABI.
+
+   Proper values are computed in TARGET_CONDITIONAL_REGISTER_USAGE.  */
+
 #define CALL_USED_REGISTERS						\
 {									\
-  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,			\
+  1, 1, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 2, 2, 2, 2,			\
   1, 1, 1,								\
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,			\
   1,									\
 }
-#endif
 
 /* For non-leaf procedures on Xtensa processors, the allocation order
    is as specified below by REG_ALLOC_ORDER.  For leaf procedures, we
@@ -267,7 +265,6 @@ extern unsigned xtensa_current_frame_size;
    argument registers are not used until after other register choices
    have been exhausted.  */
 
-#if TARGET_WINDOWED_ABI
 #define REG_ALLOC_ORDER \
 {  8,  9, 10, 11, 12, 13, 14, 15,  7,  6,  5,  4,  3,  2, \
   18, \
@@ -275,15 +272,6 @@ extern unsigned xtensa_current_frame_size;
    0,  1, 16, 17, \
   35, \
 }
-#else
-#define REG_ALLOC_ORDER \
-{  8,  9, 10, 11,  7,  6,  5,  4,  3,  2, 12, 13, 14, 15, \
-  18, \
-  19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, \
-   0,  1, 16, 17, \
-  35, \
-}
-#endif
 
 
 #define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()
@@ -383,20 +371,17 @@ extern char xtensa_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];
    take advantage of the possibility for variable-sized windows; instead,
    we use a fixed window size of 8.  */
 
-#if TARGET_WINDOWED_ABI
 #define INCOMING_REGNO(OUT)						\
-  ((GP_REG_P (OUT) &&							\
-    ((unsigned) ((OUT) - GP_REG_FIRST) >= WINDOW_SIZE)) ?		\
-   (OUT) - WINDOW_SIZE : (OUT))
+  (TARGET_WINDOWED_ABI ?						\
+   ((GP_REG_P (OUT) &&							\
+     ((unsigned) ((OUT) - GP_REG_FIRST) >= WINDOW_SIZE)) ?		\
+    (OUT) - WINDOW_SIZE : (OUT)) : (OUT))
 
 #define OUTGOING_REGNO(IN)						\
-  ((GP_REG_P (IN) &&							\
-    ((unsigned) ((IN) - GP_REG_FIRST) < WINDOW_SIZE)) ?			\
-   (IN) + WINDOW_SIZE : (IN))
-#else
-#define INCOMING_REGNO(OUT) (OUT)
-#define OUTGOING_REGNO(IN) (IN)
-#endif
+  (TARGET_WINDOWED_ABI ?						\
+   ((GP_REG_P (IN) &&							\
+     ((unsigned) ((IN) - GP_REG_FIRST) < WINDOW_SIZE)) ?		\
+    (IN) + WINDOW_SIZE : (IN)) : (IN))
 
 
 /* Define the classes of registers for register constraints in the
@@ -438,7 +423,6 @@ enum reg_class
 /* Contents of the register classes.  The Nth integer specifies the
    contents of class N.  The way the integer MASK is interpreted is
    that register R is in the class if 'MASK & (1 << R)' is 1.  */
-#if TARGET_WINDOWED_ABI
 #define REG_CLASS_CONTENTS \
 { \
   { 0x00000000, 0x00000000 }, /* no registers */ \
@@ -446,33 +430,17 @@ enum reg_class
   { 0xfff80000, 0x00000007 }, /* floating-point registers */ \
   { 0x00000000, 0x00000008 }, /* MAC16 accumulator */ \
   { 0x00000002, 0x00000000 }, /* stack pointer register */ \
-  { 0x0000ff7d, 0x00000000 }, /* preferred reload registers */ \
+  { 0x0000fffd, 0x00000000 }, /* preferred reload registers */ \
   { 0x0000fffd, 0x00000000 }, /* general-purpose registers */ \
   { 0x0003ffff, 0x00000000 }, /* integer registers */ \
   { 0xffffffff, 0x0000000f }  /* all registers */ \
 }
-#else
-#define REG_CLASS_CONTENTS \
-{ \
-  { 0x00000000, 0x00000000 }, /* no registers */ \
-  { 0x00040000, 0x00000000 }, /* coprocessor boolean registers */ \
-  { 0xfff80000, 0x00000007 }, /* floating-point registers */ \
-  { 0x00000000, 0x00000008 }, /* MAC16 accumulator */ \
-  { 0x00000002, 0x00000000 }, /* stack pointer register */ \
-  { 0x00007ffd, 0x00000000 }, /* preferred reload registers */ \
-  { 0x0000fffd, 0x00000000 }, /* general-purpose registers */ \
-  { 0x0003ffff, 0x00000000 }, /* integer registers */ \
-  { 0xffffffff, 0x0000000f }  /* all registers */ \
-}
-#endif
 
 /* A C expression whose value is a register class containing hard
    register REGNO.  In general there is more that one such class;
    choose a class which is "minimal", meaning that no smaller class
    also contains the register.  */
-extern const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER];
-
-#define REGNO_REG_CLASS(REGNO) xtensa_regno_to_class[ (REGNO) ]
+#define REGNO_REG_CLASS(REGNO) xtensa_regno_to_class (REGNO)
 
 /* Use the Xtensa AR register file for base registers.
    No index registers.  */
-- 
2.1.4

